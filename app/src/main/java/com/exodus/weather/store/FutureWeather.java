package com.exodus.weather.store;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "FUTURE_WEATHER".
 */
@Entity(active = true)
public class FutureWeather {

    @Id
    private Long id;
    private Integer weather_icon;
    private java.util.Date date;
    private Integer temp;
    private Long city_id;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 1498346090)
    private transient FutureWeatherDao myDao;
    @ToOne(joinProperty = "city_id")
    private City city;

    @Generated(hash = 1696970556)
    private transient Long city__resolvedKey;

    @Generated(hash = 1413400205)
    public FutureWeather() {
    }

    public FutureWeather(Long id) {
        this.id = id;
    }

    @Generated(hash = 1887465925)
    public FutureWeather(Long id, Integer weather_icon, java.util.Date date, Integer temp, Long city_id) {
        this.id = id;
        this.weather_icon = weather_icon;
        this.date = date;
        this.temp = temp;
        this.city_id = city_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 765994059)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFutureWeatherDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getWeather_icon() {
        return weather_icon;
    }

    public void setWeather_icon(Integer weather_icon) {
        this.weather_icon = weather_icon;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Integer getTemp() {
        return temp;
    }

    public void setTemp(Integer temp) {
        this.temp = temp;
    }

    public Long getCity_id() {
        return city_id;
    }

    public void setCity_id(Long city_id) {
        this.city_id = city_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1650935360)
    public City getCity() {
        Long __key = this.city_id;
        if (city__resolvedKey == null || !city__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CityDao targetDao = daoSession.getCityDao();
            City cityNew = targetDao.load(__key);
            synchronized (this) {
                city = cityNew;
                city__resolvedKey = __key;
            }
        }
        return city;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1856861097)
    public void setCity(City city) {
        synchronized (this) {
            this.city = city;
            city_id = city == null ? null : city.getId();
            city__resolvedKey = city_id;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
