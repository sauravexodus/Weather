package com.exodus.weather.store;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "CITY".
 */
@Entity(active = true)
public class City {

    @Id
    private Long id;
    private String name;
    private Integer temperature;
    private Integer temp_min;
    private Integer temp_max;
    private java.util.Date updated_at;
    private Integer wind_speed;
    private Integer humidity;
    private String weather_text;
    private Integer weather_icon;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 448079911)
    private transient CityDao myDao;
    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "city_id")
    })
    private List<FutureWeather> FutureWeather;

    @Generated(hash = 750791287)
    public City() {
    }

    public City(Long id) {
        this.id = id;
    }

    @Generated(hash = 179865728)
    public City(Long id, String name, Integer temperature, Integer temp_min, Integer temp_max, java.util.Date updated_at, Integer wind_speed, Integer humidity, String weather_text, Integer weather_icon) {
        this.id = id;
        this.name = name;
        this.temperature = temperature;
        this.temp_min = temp_min;
        this.temp_max = temp_max;
        this.updated_at = updated_at;
        this.wind_speed = wind_speed;
        this.humidity = humidity;
        this.weather_text = weather_text;
        this.weather_icon = weather_icon;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 293508440)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getTemperature() {
        return temperature;
    }

    public void setTemperature(Integer temperature) {
        this.temperature = temperature;
    }

    public Integer getTemp_min() {
        return temp_min;
    }

    public void setTemp_min(Integer temp_min) {
        this.temp_min = temp_min;
    }

    public Integer getTemp_max() {
        return temp_max;
    }

    public void setTemp_max(Integer temp_max) {
        this.temp_max = temp_max;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public Integer getWind_speed() {
        return wind_speed;
    }

    public void setWind_speed(Integer wind_speed) {
        this.wind_speed = wind_speed;
    }

    public Integer getHumidity() {
        return humidity;
    }

    public void setHumidity(Integer humidity) {
        this.humidity = humidity;
    }

    public String getWeather_text() {
        return weather_text;
    }

    public void setWeather_text(String weather_text) {
        this.weather_text = weather_text;
    }

    public Integer getWeather_icon() {
        return weather_icon;
    }

    public void setWeather_icon(Integer weather_icon) {
        this.weather_icon = weather_icon;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 1825259726)
    public List<FutureWeather> getFutureWeather() {
        if (FutureWeather == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FutureWeatherDao targetDao = daoSession.getFutureWeatherDao();
            List<FutureWeather> FutureWeatherNew = targetDao._queryCity_FutureWeather(id);
            synchronized (this) {
                if (FutureWeather == null) {
                    FutureWeather = FutureWeatherNew;
                }
            }
        }
        return FutureWeather;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 1659801158)
    public synchronized void resetFutureWeather() {
        FutureWeather = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
