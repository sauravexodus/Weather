package com.exodus.weather.store;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Long> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Temperature = new Property(2, Integer.class, "temperature", false, "TEMPERATURE");
        public final static Property Temp_min = new Property(3, Integer.class, "temp_min", false, "TEMP_MIN");
        public final static Property Temp_max = new Property(4, Integer.class, "temp_max", false, "TEMP_MAX");
        public final static Property Updated_at = new Property(5, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Wind_speed = new Property(6, Integer.class, "wind_speed", false, "WIND_SPEED");
        public final static Property Humidity = new Property(7, Integer.class, "humidity", false, "HUMIDITY");
        public final static Property Weather_text = new Property(8, String.class, "weather_text", false, "WEATHER_TEXT");
        public final static Property Weather_icon = new Property(9, Integer.class, "weather_icon", false, "WEATHER_ICON");
    }

    private DaoSession daoSession;


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TEMPERATURE\" INTEGER," + // 2: temperature
                "\"TEMP_MIN\" INTEGER," + // 3: temp_min
                "\"TEMP_MAX\" INTEGER," + // 4: temp_max
                "\"UPDATED_AT\" INTEGER," + // 5: updated_at
                "\"WIND_SPEED\" INTEGER," + // 6: wind_speed
                "\"HUMIDITY\" INTEGER," + // 7: humidity
                "\"WEATHER_TEXT\" TEXT," + // 8: weather_text
                "\"WEATHER_ICON\" INTEGER);"); // 9: weather_icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(3, temperature);
        }
 
        Integer temp_min = entity.getTemp_min();
        if (temp_min != null) {
            stmt.bindLong(4, temp_min);
        }
 
        Integer temp_max = entity.getTemp_max();
        if (temp_max != null) {
            stmt.bindLong(5, temp_max);
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(6, updated_at.getTime());
        }
 
        Integer wind_speed = entity.getWind_speed();
        if (wind_speed != null) {
            stmt.bindLong(7, wind_speed);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(8, humidity);
        }
 
        String weather_text = entity.getWeather_text();
        if (weather_text != null) {
            stmt.bindString(9, weather_text);
        }

        Integer weather_icon = entity.getWeather_icon();
        if (weather_icon != null) {
            stmt.bindLong(10, weather_icon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(3, temperature);
        }
 
        Integer temp_min = entity.getTemp_min();
        if (temp_min != null) {
            stmt.bindLong(4, temp_min);
        }
 
        Integer temp_max = entity.getTemp_max();
        if (temp_max != null) {
            stmt.bindLong(5, temp_max);
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(6, updated_at.getTime());
        }
 
        Integer wind_speed = entity.getWind_speed();
        if (wind_speed != null) {
            stmt.bindLong(7, wind_speed);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(8, humidity);
        }
 
        String weather_text = entity.getWeather_text();
        if (weather_text != null) {
            stmt.bindString(9, weather_text);
        }

        Integer weather_icon = entity.getWeather_icon();
        if (weather_icon != null) {
            stmt.bindLong(10, weather_icon);
        }
    }

    @Override
    protected final void attachEntity(City entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // temperature
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // temp_min
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // temp_max
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // wind_speed
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // humidity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weather_text
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // weather_icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTemperature(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTemp_min(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTemp_max(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setWind_speed(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHumidity(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWeather_text(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWeather_icon(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(City entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(City entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(City entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
